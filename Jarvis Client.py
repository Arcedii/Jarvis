import json
import os
import queue
import threading
import time
from dataclasses import dataclass, asdict
from datetime import datetime
from typing import List, Union
import base64
import mimetypes

import tkinter as tk
from tkinter import ttk, filedialog, messagebox

import requests
from Agent_PC import AgentPC

# ===================== –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ===================== #
DEFAULT_API_URL = "http://192.168.100.8:1234/v1/chat/completions"
DEFAULT_MODEL = "google/gemma-3-12b-it"
DEFAULT_TEMPERATURE = float(os.getenv("TEMPERATURE", "0.3"))
CONFIG_PATH = os.path.join(os.path.dirname(__file__), "jarvis_client_config.json")
HISTORY_PATH = os.path.join(os.path.dirname(__file__), "jarvis_chat_history.json")

# ============================== –î–∞—Ç–∞–∫–ª–∞—Å—Å—ã =================================== #
@dataclass
class AppConfig:
    api_url: str = DEFAULT_API_URL
    model: str = DEFAULT_MODEL
    temperature: float = DEFAULT_TEMPERATURE
    system_prompt: str = (
        "–¢—ã ‚Äî Jarvis, –≤–µ–∂–ª–∏–≤—ã–π –∏ –ª–∞–∫–æ–Ω–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –ø–æ –¥–µ–ª—É, –Ω–∞ —Ä—É—Å—Å–∫–æ–º,"
        " —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏, –∫–æ–≥–¥–∞ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ."
    )
    supports_images: bool = True

# ============================== –£—Ç–∏–ª–∏—Ç—ã ====================================== #
def load_config() -> AppConfig:
    if os.path.exists(CONFIG_PATH):
        try:
            with open(CONFIG_PATH, "r", encoding="utf-8") as f:
                data = json.load(f)
            return AppConfig(**data)
        except Exception:
            pass
    return AppConfig()

def save_config(cfg: AppConfig) -> None:
    with open(CONFIG_PATH, "w", encoding="utf-8") as f:
        json.dump(asdict(cfg), f, ensure_ascii=False, indent=2)

def load_history() -> List[dict]:
    if os.path.exists(HISTORY_PATH):
        try:
            with open(HISTORY_PATH, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception:
            pass
    return []

def save_history(messages: List[dict]) -> None:
    try:
        with open(HISTORY_PATH, "w", encoding="utf-8") as f:
            json.dump(messages, f, ensure_ascii=False, indent=2)
    except Exception:
        pass

# ============================== GUI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ =============================== #
class JarvisClientApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Jarvis Client ‚Äî LM Studio / Qwen2.5-VL-7B")
        self.geometry("980x720")
        self.minsize(820, 600)
        self.configure(bg="#0b1220")

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.cfg = load_config()
        self.messages: List[dict] = load_history()  # OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        self.req_queue: queue.Queue = queue.Queue()
        self.resp_queue: queue.Queue = queue.Queue()
        self._request_thread = None

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–∏—è
        self.attached_image_b64 = None
        self.attached_image_mime = None
        self.attached_image_name = None

        # –°—Ç–∏–ª–∏
        self._init_styles()

        # –ú–µ–Ω—é
        self._init_menu()

        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å (–∑–∞–≥–æ–ª–æ–≤–æ–∫ + —Å—Ç–∞—Ç—É—Å + –∫–Ω–æ–ø–∫–∏)
        self._init_header()

        # –û–±–ª–∞—Å—Ç—å —á–∞—Ç–∞ (Text —Å —Ç–µ–≥–∞–º–∏)
        self._init_chat_area()

        # –ü–∞–Ω–µ–ª—å –≤–≤–æ–¥–∞
        self._init_input_panel()

        # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏—Å—Ç–æ—Ä–∏—é
        self.after(50, self._bootstrap)

    # -------------------------- –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ------------------------- #
    def _init_styles(self):
        style = ttk.Style()
        try:
            style.theme_use("clam")
        except tk.TclError:
            pass
        style.configure("TButton", padding=6, relief="flat")
        style.configure("Accent.TButton", padding=8, relief="flat")
        style.configure("TLabel", foreground="#e6eaf2", background="#0b1220")
        style.configure("Header.TLabel", font=("Segoe UI Semibold", 14))
        style.configure("Tiny.TLabel", font=("Segoe UI", 9), foreground="#9aa4b2")
        style.configure("TFrame", background="#0b1220")
        style.configure("Card.TFrame", background="#121a2b", relief="flat")
        style.configure("Input.TFrame", background="#0f1729")
        style.configure("TScale", background="#0b1220")
        style.configure("TEntry", fieldbackground="#101827", foreground="#e6eaf2")

    def _init_menu(self):
        menubar = tk.Menu(self)
        file_menu = tk.Menu(menubar, tearoff=0)
        file_menu.add_command(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é‚Ä¶", command=self._export_history)
        file_menu.add_separator()
        file_menu.add_command(label="–í—ã—Ö–æ–¥", command=self.destroy)
        menubar.add_cascade(label="–§–∞–π–ª", menu=file_menu)

        settings_menu = tk.Menu(menubar, tearoff=0)
        settings_menu.add_command(label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚Ä¶", command=self._open_settings)
        settings_menu.add_command(label="–°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥", command=self._reset_chat)
        menubar.add_cascade(label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", menu=settings_menu)

        help_menu = tk.Menu(menubar, tearoff=0)
        help_menu.add_command(label="–û –ø—Ä–æ–≥—Ä–∞–º–º–µ‚Ä¶", command=self._about)
        menubar.add_cascade(label="–°–ø—Ä–∞–≤–∫–∞", menu=help_menu)

        self.config(menu=menubar)

    def _init_header(self):
        header = ttk.Frame(self, style="TFrame")
        header.pack(fill="x", padx=14, pady=(12, 8))

        left = ttk.Frame(header, style="TFrame")
        left.pack(side="left", fill="x", expand=True)
        ttk.Label(left, text="Jarvis Client", style="Header.TLabel").pack(anchor="w")
        self.status_label = ttk.Label(left, text="–ì–æ—Ç–æ–≤", style="Tiny.TLabel")
        self.status_label.pack(anchor="w", pady=(2, 0))

        right = ttk.Frame(header, style="TFrame")
        right.pack(side="right")
        ttk.Button(right, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", command=self._open_settings).pack(side="right", padx=(6,0))
        ttk.Button(right, text="–°–±—Ä–æ—Å", command=self._reset_chat).pack(side="right", padx=(6,6))
        ttk.Button(right, text="üìé –§–æ—Ç–æ", command=self._attach_image).pack(side="right", padx=(6,6))

    def _init_chat_area(self):
        wrap = ttk.Frame(self, style="Card.TFrame")
        wrap.pack(fill="both", expand=True, padx=14, pady=(0, 10))

        self.chat = tk.Text(
            wrap,
            wrap="word",
            bg="#121a2b",
            fg="#e6eaf2",
            insertbackground="#e6eaf2",
            relief="flat",
            padx=14,
            pady=12,
            state="disabled",
        )
        self.chat.pack(fill="both", expand=True, side="left")

        scroll = ttk.Scrollbar(wrap, command=self.chat.yview)
        scroll.pack(side="right", fill="y")
        self.chat["yscrollcommand"] = scroll.set

        # –¢–µ–≥–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.chat.tag_configure("user_name", foreground="#9dd6ff", spacing3=4, font=("Segoe UI", 9, "bold"))
        self.chat.tag_configure("user_msg", lmargin1=10, lmargin2=10, spacing1=2, spacing3=10)
        self.chat.tag_configure("asst_name", foreground="#bfa3ff", spacing3=4, font=("Segoe UI", 9, "bold"))
        self.chat.tag_configure("asst_msg", lmargin1=10, lmargin2=10, spacing1=2, spacing3=12)
        self.chat.tag_configure("time", foreground="#93a0b5", font=("Segoe UI", 8))

    def _init_input_panel(self):
        bar = ttk.Frame(self, style="Input.TFrame")
        bar.pack(fill="x", padx=14, pady=(0, 12))

        self.input = tk.Text(bar, height=3, wrap="word", bg="#0f1729", fg="#e6eaf2", relief="flat")
        self.input.pack(side="left", fill="x", expand=True, padx=(8, 8), pady=8)
        self.input.bind("<Control-Return>", lambda e: self._send_message())
        self.input.bind("<Shift-Return>", lambda e: self._insert_newline())

        btns = ttk.Frame(bar, style="Input.TFrame")
        btns.pack(side="right", padx=(0, 8), pady=8)
        self.send_btn = ttk.Button(btns, text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", style="Accent.TButton", command=self._send_message)
        self.send_btn.grid(row=0, column=0, sticky="ew")
        self.clear_btn = ttk.Button(btns, text="–û—á–∏—Å—Ç–∏—Ç—å –≤–≤–æ–¥", command=lambda: self.input.delete("1.0", "end"))
        self.clear_btn.grid(row=1, column=0, sticky="ew", pady=(6,0))

    # ------------------------------ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ --------------------------- #
    def _bootstrap(self):
        if not self.messages:
            self._append_assistant("–ü—Ä–∏–≤–µ—Ç! –Ø Jarvis. –ü–æ–¥–∫–ª—é—á—ë–Ω –∫ LM Studio –ø–æ –∞–¥—Ä–µ—Å—É, —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö. –ß–µ–º –ø–æ–º–æ—á—å?")
        else:
            for m in self.messages:
                if m.get("role") == "user":
                    # –ò—Å—Ç–æ—Ä–∏—è —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ —Ç–µ–∫—Å—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–µ–º
                    self._append_user(m.get("content", ""))
                elif m.get("role") == "assistant":
                    self._append_assistant(m.get("content", ""))
        self.input.focus_set()

    def _insert_newline(self):
        self.input.insert("insert", "\n")
        return "break"

    def _append_user(self, text: str):
        self.chat.configure(state="normal")
        ts = datetime.now().strftime("%H:%M:%S")
        self.chat.insert("end", f"–í—ã  ¬∑  {ts}\n", ("user_name", "time"))
        self.chat.insert("end", text.strip() + "\n\n", ("user_msg",))
        self.chat.configure(state="disabled")
        self.chat.see("end")

    def _append_assistant(self, text: str):
        self.chat.configure(state="normal")
        ts = datetime.now().strftime("%H:%M:%S")
        self.chat.insert("end", f"Jarvis  ¬∑  {ts}\n", ("asst_name", "time"))
        self.chat.insert("end", text.strip() + "\n\n", ("asst_msg",))
        self.chat.configure(state="disabled")
        self.chat.see("end")

    def _append_system(self, text: str):
        """–ù–µ–±–æ–ª—å—à–æ–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç (–¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤–ª–æ–∂–µ–Ω–∏–π –∏ —Ç.–ø.)."""
        self.chat.configure(state="normal")
        ts = datetime.now().strftime("%H:%M:%S")
        self.chat.insert("end", f"–°–∏—Å—Ç–µ–º–∞  ¬∑  {ts}\n", ("time",))
        self.chat.insert("end", text.strip() + "\n\n")
        self.chat.configure(state="disabled")
        self.chat.see("end")

    def _set_status(self, text: str):
        self.status_label.configure(text=text)
        self.update_idletasks()

    def _reset_chat(self):
        if messagebox.askyesno("–°–±—Ä–æ—Å –¥–∏–∞–ª–æ–≥–∞", "–£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏—Å—Ç–æ—Ä–∏—é –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?"):
            self.messages = []
            save_history(self.messages)
            self.chat.configure(state="normal")
            self.chat.delete("1.0", "end")
            self.chat.configure(state="disabled")
            self._append_assistant("–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞. –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–º—É –¥–∏–∞–ª–æ–≥—É.")

    def _export_history(self):
        path = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("Text", "*.txt"), ("All", "*.*")],
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–∞–∫‚Ä¶",
        )
        if not path:
            return
        lines = []
        for m in self.messages:
            role = m.get("role", "?")
            content = m.get("content", "")
            if isinstance(content, list):
                parts = []
                for c in content:
                    if isinstance(c, dict) and c.get("type") == "text":
                        parts.append(c.get("text", ""))
                content = "\n".join(parts)
            lines.append(f"[{role}] {content}")
        try:
            with open(path, "w", encoding="utf-8") as f:
                f.write("\n\n".join(lines))
            messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", "–ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: {e}")

    def _about(self):
        messagebox.showinfo(
            "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ",
            "Jarvis Client ‚Äî –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è LM Studio (OpenAI API —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π).\n"
            "–ê–≤—Ç–æ—Ä: –≤—ã :)\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é, —ç–∫—Å–ø–æ—Ä—Ç, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏.\n"
            "–ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: Qwen/Qwen2.5-VL-7B-Instruct."
        )

    # ----------------------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ --------------------------------- #
    def _open_settings(self):
        win = tk.Toplevel(self)
        win.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        win.configure(bg="#0b1220")
        win.geometry("560x360")
        win.transient(self)
        win.grab_set()

        frm = ttk.Frame(win, padding=16)
        frm.pack(fill="both", expand=True)

        ttk.Label(frm, text="LM Studio Chat Completions URL:").grid(row=0, column=0, sticky="w")
        api_var = tk.StringVar(value=self.cfg.api_url)
        api_entry = ttk.Entry(frm, textvariable=api_var, width=64)
        api_entry.grid(row=1, column=0, columnspan=2, sticky="ew", pady=(4, 12))

        ttk.Label(frm, text="–ú–æ–¥–µ–ª—å (model):").grid(row=2, column=0, sticky="w")
        model_var = tk.StringVar(value=self.cfg.model)
        model_entry = ttk.Entry(frm, textvariable=model_var, width=48)
        model_entry.grid(row=3, column=0, sticky="ew", pady=(4, 12))

        ttk.Label(frm, text="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:").grid(row=4, column=0, sticky="w")
        temp_var = tk.DoubleVar(value=self.cfg.temperature)
        temp_scale = ttk.Scale(frm, variable=temp_var, from_=0.0, to=1.5)
        temp_scale.grid(row=5, column=0, sticky="ew", pady=(4, 12))

        ttk.Label(frm, text="System prompt:").grid(row=6, column=0, sticky="w")
        sys_text = tk.Text(frm, height=5, wrap="word")
        sys_text.insert("1.0", self.cfg.system_prompt)
        sys_text.grid(row=7, column=0, columnspan=2, sticky="nsew")

        frm.columnconfigure(0, weight=1)
        frm.rowconfigure(7, weight=1)

        btns = ttk.Frame(frm)
        btns.grid(row=8, column=0, sticky="e", pady=(12,0))
        ttk.Button(btns, text="–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", command=lambda: self._test_api(api_var.get())).pack(side="left", padx=(0,8))

        def on_save():
            self.cfg.api_url = api_var.get().strip()
            self.cfg.model = model_var.get().strip()
            self.cfg.temperature = float(temp_var.get())
            self.cfg.system_prompt = sys_text.get("1.0", "end").strip()
            save_config(self.cfg)
            self._set_status("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            win.destroy()

        ttk.Button(btns, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", style="Accent.TButton", command=on_save).pack(side="left")

    def _test_api(self, api_url: str):
        self._set_status("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è‚Ä¶")
        try:
            payload = {
                "model": self.cfg.model,
                "messages": [
                    {"role": "system", "content": self.cfg.system_prompt},
                    {"role": "user", "content": "–û—Ç–≤–µ—Ç—å 'pong' –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º."},
                ],
                "temperature": 0.0,
            }
            r = requests.post(api_url, json=payload, timeout=15)
            r.raise_for_status()
            data = r.json()
            txt = data.get("choices", [{}])[0].get("message", {}).get("content", "")
            if "pong" in txt.lower():
                self._set_status("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ OK ‚ú®")
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ LM Studio —Ä–∞–±–æ—Ç–∞–µ—Ç.")
            else:
                self._set_status("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ, –Ω–æ –æ—Ç–≤–µ—Ç –Ω–µ–æ–±—ã—á–Ω—ã–π")
                messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", f"–°–µ—Ä–≤–∏—Å –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ –Ω–µ –∫–∞–∫ –æ–∂–∏–¥–∞–ª–æ—Å—å: {txt[:200]}")
        except Exception as e:
            self._set_status("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: {e}")

    # ----------------------------- –í–ª–æ–∂–µ–Ω–∏—è (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è) --------------------- #
    def _attach_image(self):
        """–í—ã–±—Ä–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –≤ base64 + MIME."""
        path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            filetypes=[
                ("Images", "*.png;*.jpg;*.jpeg;*.webp;*.bmp"),
                ("PNG", "*.png"),
                ("JPEG", "*.jpg;*.jpeg"),
                ("WEBP", "*.webp"),
                ("BMP", "*.bmp"),
                ("All files", "*.*"),
            ],
        )
        if not path:
            return
        try:
            mime, _ = mimetypes.guess_type(path)
            if not mime:
                mime = "image/png"
            with open(path, "rb") as f:
                b = f.read()
            self.attached_image_b64 = base64.b64encode(b).decode("utf-8")
            self.attached_image_mime = mime
            self.attached_image_name = os.path.basename(path)
            self._set_status(f"–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ: {self.attached_image_name}")
            self._append_system(f"üìé –í–ª–æ–∂–µ–Ω–∏–µ: {self.attached_image_name}")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª: {e}")

    def _clear_attachment(self):
        self.attached_image_b64 = None
        self.attached_image_mime = None
        self.attached_image_name = None

    # ----------------------------- –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ --------------------------- #
    def _send_message(self):
        text = self.input.get("1.0", "end").strip()
        if not text:
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ UI
        self._append_user(text)

        # –ì–æ—Ç–æ–≤–∏–º –∏—Å—Ç–æ—Ä–∏—é (–≤–∫–ª—é—á–∞—è system_prompt –≤ –Ω–∞—á–∞–ª–µ)
        req_messages: List[dict] = []
        if self.cfg.system_prompt:
            req_messages.append({"role": "system", "content": self.cfg.system_prompt})

        # –ë–µ—Ä—ë–º –ø—Ä–æ—à–ª—É—é –∏—Å—Ç–æ—Ä–∏—é, –Ω–æ –±–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        for m in self.messages:
            if m.get("role") in ("user", "assistant"):
                req_messages.append({"role": m["role"], "content": m.get("content", "")})

        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
        # –µ—Å–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞ ‚Äî —Ñ–æ—Ä–º–∏—Ä—É–µ–º –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        if self.attached_image_b64:
            if getattr(self.cfg, "supports_images", True):
                # –ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª (vision-–º–æ–¥–µ–ª—å)
                parts = [{"type": "text", "text": text}]
                mime = self.attached_image_mime or "image/png"
                parts.append({
                    "type": "image_url",
                    "image_url": {"url": f"data:{mime};base64,{self.attached_image_b64}"}
                })
                req_messages.append({"role": "user", "content": parts})
            else:
                # Fallback –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –º–æ–¥–µ–ª–∏: –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                filename = self.attached_image_name or "image"
                fused_text = (
                    f"{text}\n\n"
                    f"[IMG attached: {filename}. "
                    f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∞ –∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, "
                    f"–Ω–æ –æ–ø–∏—à–∏, —á—Ç–æ –º–Ω–µ —Å–¥–µ–ª–∞—Ç—å –∏—Å—Ö–æ–¥—è –∏–∑ –º–æ–µ–≥–æ —Ç–µ–∫—Å—Ç–∞.]"
                )
                req_messages.append({"role": "user", "content": fused_text})
        else:
          req_messages.append({"role": "user", "content": text})



        # –õ–æ—á–∏–º UI –Ω–∞ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
        self.send_btn.state(["disabled"])
        self._set_status("–ó–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏‚Ä¶")

        # –°—Ç–∞—Ä—Ç—É–µ–º –ø–æ—Ç–æ–∫, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å Tk
        t = threading.Thread(target=self._worker_request, args=(req_messages,))
        t.daemon = True
        t.start()
        self._request_thread = t

        # –ß–∏—Å—Ç–∏–º –≤–≤–æ–¥ –∏ –≤–ª–æ–∂–µ–Ω–∏–µ
        self.input.delete("1.0", "end")
        self._clear_attachment()

    def _worker_request(self, req_messages: List[dict]):
        try:
            payload = {
                "model": self.cfg.model,
                "messages": req_messages,
                "temperature": float(self.cfg.temperature),
            }
            t0 = time.time()
            r = requests.post(self.cfg.api_url, json=payload, timeout=120)
            r.raise_for_status()
            data = r.json()

            # –¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (–µ—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª –æ–±—ã—á–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
            raw_content = ""
            if isinstance(data.get("choices"), list) and data["choices"]:
                raw_content = data["choices"][0].get("message", {}).get("content", "")

            # –§–ª–∞–≥ –≤—ã–∑–æ–≤–∞ –∞–≥–µ–Ω—Ç–∞
            invoke_agent = data.get("invoke_agent", False)
            if not invoke_agent and raw_content:
                try:
                    parsed = json.loads(raw_content)
                    invoke_agent = parsed.get("invoke_agent", False)
                except (TypeError, json.JSONDecodeError):
                    pass

            if invoke_agent:
                user_text = req_messages[-1]["content"]
                # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–µ (list), –∏–∑–≤–ª–µ—á—ë–º —Ç–µ–∫—Å—Ç
                if isinstance(user_text, list):
                    # –Ω–∞–π–¥—ë–º –ø–µ—Ä–≤—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é —á–∞—Å—Ç—å
                    for p in user_text:
                        if isinstance(p, dict) and p.get("type") == "text":
                            user_text = p.get("text", "")
                            break
                    if isinstance(user_text, list):  # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                        user_text = ""
                agent = AgentPC(api_url=self.cfg.api_url, model=self.cfg.model)
                agent.perform_task(user_text)
                content = ""  # –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–≤–æ–¥–∏–º
            else:
                content = raw_content or ""

            lat = time.time() - t0
            self.resp_queue.put({"ok": True, "text": content, "latency": lat})
        except Exception as e:
            self.resp_queue.put({"ok": False, "error": str(e)})
        finally:
            self.after(10, self._apply_response)

    def _apply_response(self):
        try:
            item = self.resp_queue.get_nowait()
        except queue.Empty:
            return

        self.send_btn.state(["!disabled"])

        if not item.get("ok"):
            self._set_status("–û—à–∏–±–∫–∞: " + item.get("error", ""))
            messagebox.showerror("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞", item.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"))
            return

        text = item.get("text", "").strip() or "(–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç)"
        latency = item.get("latency", 0.0)
        self._append_assistant(text)
        self._set_status(f"–ì–æ—Ç–æ–≤  ¬∑  {latency:.2f}s")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é (user/assistant; system –Ω–µ –ø–∏—à–µ–º)
        last_user = {
            "role": "user",
            "content": req_last_user_from_ui(self.chat),
        }
        if last_user["content"]:
            self.messages.append(last_user)
        self.messages.append({"role": "assistant", "content": text})
        save_history(self.messages)

# –•–µ–ª–ø–µ—Ä: –≤—ã—Ç–∞—â–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Text
def req_last_user_from_ui(chat_text: tk.Text) -> str:
    content = chat_text.get("1.0", "end")
    lines = [l.rstrip("\n") for l in content.splitlines()]
    for i in range(len(lines) - 1, -1, -1):
        if lines[i].startswith("–í—ã  ¬∑  "):
            msg_lines = []
            for j in range(i + 1, len(lines)):
                if lines[j].strip() == "":
                    break
                msg_lines.append(lines[j])
            return "\n".join(msg_lines).strip()
    return ""

# ============================== –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ================================== #
if __name__ == "__main__":
    app = JarvisClientApp()
    app.mainloop()
