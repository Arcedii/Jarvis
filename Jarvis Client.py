# jarvis_client_gui.py
from __future__ import annotations
import base64
import mimetypes
import os
import json
from dataclasses import asdict
from datetime import datetime
from typing import List, Dict, Any, Optional

import tkinter as tk
from tkinter import ttk, filedialog, messagebox

from Scipts.OpenAiGPTBrain import LLMClient, LLMConfig

CONFIG_PATH = os.path.join(os.path.dirname(__file__), "jarvis_client_config.json")
HISTORY_PATH = os.path.join(os.path.dirname(__file__), "jarvis_chat_history.json")
MAX_TURNS_TO_SEND = 2

# ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–∑–∞–≥—Ä—É–∑–∫–∞ ---------- #
def load_config() -> LLMConfig:
    if os.path.exists(CONFIG_PATH):
        try:
            with open(CONFIG_PATH, "r", encoding="utf-8") as f:
                data = json.load(f)
            return LLMConfig(**data)
        except Exception:
            pass
    return LLMConfig()


def save_config(cfg: LLMConfig) -> None:
    with open(CONFIG_PATH, "w", encoding="utf-8") as f:
        json.dump(asdict(cfg), f, ensure_ascii=False, indent=2)


def load_history() -> List[Dict[str, Any]]:
    if os.path.exists(HISTORY_PATH):
        try:
            with open(HISTORY_PATH, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception:
            pass
    return []


def save_history(messages: List[Dict[str, Any]]) -> None:
    try:
        with open(HISTORY_PATH, "w", encoding="utf-8") as f:
            json.dump(messages, f, ensure_ascii=False, indent=2)
    except Exception:
        pass


class JarvisClientApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Jarvis Client ‚Äî LM Studio")
        self.geometry("980x720")
        self.minsize(820, 600)
        self.configure(bg="#0b1220")

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.cfg: LLMConfig = load_config()
        self.llm = LLMClient(self.cfg)
        self.messages: List[Dict[str, Any]] = load_history()

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–∏—è (–≤–∏–∑—É–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å)
        self.attached_image_b64: Optional[str] = None
        self.attached_image_mime: Optional[str] = None
        self.attached_image_name: Optional[str] = None

        # UI
        self._init_styles()
        self._init_menu()
        self._init_header()
        self._init_chat_area()
        self._init_input_panel()
        self.after(50, self._bootstrap)

    # ---------- UI –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ ---------- #
    def _init_styles(self):
        style = ttk.Style()
        try:
            style.theme_use("clam")
        except tk.TclError:
            pass
        style.configure("TButton", padding=6, relief="flat")
        style.configure("Accent.TButton", padding=8, relief="flat")
        style.configure("TLabel", foreground="#e6eaf2", background="#0b1220")
        style.configure("Header.TLabel", font=("Segoe UI Semibold", 14))
        style.configure("Tiny.TLabel", font=("Segoe UI", 9), foreground="#9aa4b2")
        style.configure("TFrame", background="#0b1220")
        style.configure("Card.TFrame", background="#121a2b", relief="flat")
        style.configure("Input.TFrame", background="#0f1729")
        style.configure("TEntry", fieldbackground="#101827", foreground="#e6eaf2")

    def _init_menu(self):
        menubar = tk.Menu(self)
        file_menu = tk.Menu(menubar, tearoff=0)
        file_menu.add_command(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é‚Ä¶", command=self._export_history)
        file_menu.add_separator()
        file_menu.add_command(label="–í—ã—Ö–æ–¥", command=self.destroy)
        menubar.add_cascade(label="–§–∞–π–ª", menu=file_menu)

        settings_menu = tk.Menu(menubar, tearoff=0)
        settings_menu.add_command(label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚Ä¶", command=self._open_settings)
        settings_menu.add_command(label="–°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥", command=self._reset_chat)
        menubar.add_cascade(label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", menu=settings_menu)

        help_menu = tk.Menu(menubar, tearoff=0)
        help_menu.add_command(label="–û –ø—Ä–æ–≥—Ä–∞–º–º–µ‚Ä¶", command=self._about)
        menubar.add_cascade(label="–°–ø—Ä–∞–≤–∫–∞", menu=help_menu)
        self.config(menu=menubar)

    def _init_header(self):
        header = ttk.Frame(self, style="TFrame")
        header.pack(fill="x", padx=14, pady=(12, 8))
        left = ttk.Frame(header, style="TFrame")
        left.pack(side="left", fill="x", expand=True)
        ttk.Label(left, text="Jarvis Client", style="Header.TLabel").pack(anchor="w")
        self.status_label = ttk.Label(left, text="–ì–æ—Ç–æ–≤", style="Tiny.TLabel")
        self.status_label.pack(anchor="w", pady=(2, 0))
        right = ttk.Frame(header, style="TFrame")
        right.pack(side="right")
        ttk.Button(right, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", command=self._open_settings).pack(side="right", padx=(6, 0))
        ttk.Button(right, text="–°–±—Ä–æ—Å", command=self._reset_chat).pack(side="right", padx=(6, 6))
        ttk.Button(right, text="üìé –§–æ—Ç–æ", command=self._attach_image).pack(side="right", padx=(6, 6))

    def _init_chat_area(self):
        wrap = ttk.Frame(self, style="Card.TFrame")
        wrap.pack(fill="both", expand=True, padx=14, pady=(0, 10))
        self.chat = tk.Text(
            wrap,
            wrap="word",
            bg="#121a2b",
            fg="#e6eaf2",
            insertbackground="#e6eaf2",
            relief="flat",
            padx=14,
            pady=12,
            state="disabled",
        )
        self.chat.pack(fill="both", expand=True, side="left")
        scroll = ttk.Scrollbar(wrap, command=self.chat.yview)
        scroll.pack(side="right", fill="y")
        self.chat["yscrollcommand"] = scroll.set
        self.chat.tag_configure("user_name", foreground="#9dd6ff", spacing3=4, font=("Segoe UI", 9, "bold"))
        self.chat.tag_configure("user_msg", lmargin1=10, lmargin2=10, spacing1=2, spacing3=10)
        self.chat.tag_configure("asst_name", foreground="#bfa3ff", spacing3=4, font=("Segoe UI", 9, "bold"))
        self.chat.tag_configure("asst_msg", lmargin1=10, lmargin2=10, spacing1=2, spacing3=12)
        self.chat.tag_configure("time", foreground="#93a0b5", font=("Segoe UI", 8))

    def _init_input_panel(self):
        bar = ttk.Frame(self, style="Input.TFrame")
        bar.pack(fill="x", padx=14, pady=(0, 12))
        self.input = tk.Text(bar, height=3, wrap="word", bg="#0f1729", fg="#e6eaf2", relief="flat")
        self.input.pack(side="left", fill="x", expand=True, padx=(8, 8), pady=8)
        self.input.bind("<Control-Return>", lambda e: self._send_message())
        self.input.bind("<Shift-Return>", lambda e: self._insert_newline())
        btns = ttk.Frame(bar, style="Input.TFrame")
        btns.pack(side="right", padx=(0, 8), pady=8)
        self.send_btn = ttk.Button(btns, text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", style="Accent.TButton", command=self._send_message)
        self.send_btn.grid(row=0, column=0, sticky="ew")
        self.clear_btn = ttk.Button(btns, text="–û—á–∏—Å—Ç–∏—Ç—å –≤–≤–æ–¥", command=lambda: self.input.delete("1.0", "end"))
        self.clear_btn.grid(row=1, column=0, sticky="ew", pady=(6, 0))

    # ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ UI ---------- #
    def _bootstrap(self):
        if not self.messages:
            self._append_assistant("–ü—Ä–∏–≤–µ—Ç! –Ø Jarvis. –ü–æ–¥–∫–ª—é—á—ë–Ω –∫ LM Studio. –ß–µ–º –ø–æ–º–æ—á—å?")
        else:
            for m in self.messages:
                if m.get("role") == "user":
                    self._append_user(m.get("content", ""))
                elif m.get("role") == "assistant":
                    self._append_assistant(m.get("content", ""))
        self.input.focus_set()

    def _insert_newline(self):
        self.input.insert("insert", "\n")
        return "break"

    def _append_user(self, text: str):
        self.chat.configure(state="normal")
        ts = datetime.now().strftime("%H:%M:%S")
        self.chat.insert("end", f"–í—ã  ¬∑  {ts}\n", ("user_name", "time"))
        self.chat.insert("end", text.strip() + "\n\n", ("user_msg",))
        self.chat.configure(state="disabled")
        self.chat.see("end")

    def _append_assistant(self, text: str):
        self.chat.configure(state="normal")
        ts = datetime.now().strftime("%H:%M:%S")
        self.chat.insert("end", f"Jarvis  ¬∑  {ts}\n", ("asst_name", "time"))
        self.chat.insert("end", text.strip() + "\n\n", ("asst_msg",))
        self.chat.configure(state="disabled")
        self.chat.see("end")

    def _append_system(self, text: str):
        self.chat.configure(state="normal")
        ts = datetime.now().strftime("%H:%M:%S")
        self.chat.insert("end", f"–°–∏—Å—Ç–µ–º–∞  ¬∑  {ts}\n", ("time",))
        self.chat.insert("end", text.strip() + "\n\n")
        self.chat.configure(state="disabled")
        self.chat.see("end")

    def _set_status(self, text: str):
        self.status_label.configure(text=text)
        self.update_idletasks()

    def _reset_chat(self):
        if messagebox.askyesno("–°–±—Ä–æ—Å –¥–∏–∞–ª–æ–≥–∞", "–£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏—Å—Ç–æ—Ä–∏—é –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?"):
            self.messages = []
            save_history(self.messages)
            self.chat.configure(state="normal")
            self.chat.delete("1.0", "end")
            self.chat.configure(state="disabled")
            self._append_assistant("–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞. –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–º—É –¥–∏–∞–ª–æ–≥—É.")

    def _export_history(self):
        path = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("Text", "*.txt"), ("All", "*.*")],
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–∞–∫‚Ä¶",
        )
        if not path:
            return
        lines = []
        for m in self.messages:
            role = m.get("role", "?")
            content = m.get("content", "")
            lines.append(f"[{role}] {content}")
        try:
            with open(path, "w", encoding="utf-8") as f:
                f.write("\n\n".join(lines))
            messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", "–ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: {e}")

    def _about(self):
        messagebox.showinfo(
            "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ",
            "Jarvis Client ‚Äî –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è LM Studio (OpenAI API —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π).\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é, —ç–∫—Å–ø–æ—Ä—Ç, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏."
        )

    # ---------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---------- #
    def _open_settings(self):
        win = tk.Toplevel(self)
        win.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        win.configure(bg="#0b1220")
        win.geometry("560x360")
        win.transient(self)
        win.grab_set()

        frm = ttk.Frame(win, padding=16)
        frm.pack(fill="both", expand=True)

        ttk.Label(frm, text="LM Studio Chat Completions URL:").grid(row=0, column=0, sticky="w")
        api_var = tk.StringVar(value=self.cfg.api_url)
        api_entry = ttk.Entry(frm, textvariable=api_var, width=64)
        api_entry.grid(row=1, column=0, columnspan=2, sticky="ew", pady=(4, 12))

        ttk.Label(frm, text="–ú–æ–¥–µ–ª—å (model):").grid(row=2, column=0, sticky="w")
        model_var = tk.StringVar(value=self.cfg.model)
        model_entry = ttk.Entry(frm, textvariable=model_var, width=48)
        model_entry.grid(row=3, column=0, sticky="ew", pady=(4, 12))

        ttk.Label(frm, text="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:").grid(row=4, column=0, sticky="w")
        temp_var = tk.DoubleVar(value=self.cfg.temperature)
        temp_scale = ttk.Scale(frm, variable=temp_var, from_=0.0, to=1.5)
        temp_scale.grid(row=5, column=0, sticky="ew", pady=(4, 12))

        ttk.Label(frm, text="System prompt:").grid(row=6, column=0, sticky="w")
        sys_text = tk.Text(frm, height=5, wrap="word")
        sys_text.insert("1.0", self.cfg.system_prompt)
        sys_text.grid(row=7, column=0, columnspan=2, sticky="nsew")

        frm.columnconfigure(0, weight=1)
        frm.rowconfigure(7, weight=1)

        btns = ttk.Frame(frm)
        btns.grid(row=8, column=0, sticky="e", pady=(12, 0))

        def on_test():
            self._set_status("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è‚Ä¶")
            try:
                res = self.llm.test_api(api_var.get(), model_var.get())
                if "pong" in (res.get("text") or "").lower():
                    self._set_status("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ OK ‚ú®")
                    messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Jarvis Brain —Ä–∞–±–æ—Ç–∞–µ—Ç.")
                else:
                    self._set_status("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ, –Ω–æ –æ—Ç–≤–µ—Ç –Ω–µ–æ–±—ã—á–Ω—ã–π")
                    messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", f"–°–µ—Ä–≤–∏—Å –æ—Ç–≤–µ—á–∞–µ—Ç: {res.get('text','')[:200]}")
            except Exception as e:
                self._set_status("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: {e}")

        ttk.Button(btns, text="–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", command=on_test).pack(side="left", padx=(0, 8))

        def on_save():
            self.llm.set_config(
                api_url=api_var.get().strip(),
                model=model_var.get().strip(),
                temperature=float(temp_var.get()),
                system_prompt=sys_text.get("1.0", "end").strip(),
            )
            self.cfg = self.llm.get_config()
            save_config(self.cfg)
            self._set_status("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            win.destroy()

        ttk.Button(btns, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", style="Accent.TButton", command=on_save).pack(side="left")

    # ---------- –í–ª–æ–∂–µ–Ω–∏—è (–≤–∏–∑—É–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å) ---------- #
    def _attach_image(self):
        path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            filetypes=[
                ("Images", "*.png;*.jpg;*.jpeg;*.webp;*.bmp"),
                ("PNG", "*.png"),
                ("JPEG", "*.jpg;*.jpeg"),
                ("WEBP", "*.webp"),
                ("BMP", "*.bmp"),
                ("All files", "*.*"),
            ],
        )
        if not path:
            return
        try:
            mime, _ = mimetypes.guess_type(path)
            if not mime:
                mime = "image/png"
            with open(path, "rb") as f:
                b = f.read()
            self.attached_image_b64 = base64.b64encode(b).decode("utf-8")
            self.attached_image_mime = mime
            self.attached_image_name = os.path.basename(path)
            self._set_status(f"–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ: {self.attached_image_name}")
            self._append_system(f"üìé –í–ª–æ–∂–µ–Ω–∏–µ: {self.attached_image_name}")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª: {e}")

    def _clear_attachment(self):
        self.attached_image_b64 = None
        self.attached_image_mime = None
        self.attached_image_name = None

    # ---------- –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –≤–∏–∑—É–∞–ª + –≤—ã–∑–æ–≤ LLMClient) ---------- #
    def _send_message(self):
        text = self.input.get("1.0", "end").strip()
        if not text:
            return
        self._append_user(text)

        # –ì–æ—Ç–æ–≤–∏–º attachment-—Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∏–∑—É–∞–ª–∞
        attachment = None
        if self.attached_image_b64:
            attachment = {
                "b64": self.attached_image_b64,
                "mime": self.attached_image_mime or "image/png",
                "name": self.attached_image_name or "image",
            }

        # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ LLMClient
        req_messages = self.llm.build_messages(
            system_prompt=self.cfg.system_prompt,
            history=self.messages,
            user_text=text,
            attachment=attachment,
            max_turns_to_send=MAX_TURNS_TO_SEND,
            force_text_only=False,
        )

        # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        self.send_btn.state(["disabled"])
        self._set_status("–ó–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏‚Ä¶ (–∫–æ—Ä–æ—Ç–∫–∏–π)")

        def on_success(answer_text: str, latency: float, meta: Dict[str, Any]):
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ UI-–ø–æ—Ç–æ–∫
            self.after(10, lambda: self._apply_success(answer_text, latency))

        def on_error(err_text: str):
            self.after(10, lambda: self._apply_error(err_text))

        self.llm.send_chat_async(req_messages, on_success, on_error)

        # –æ—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞/–≤–ª–æ–∂–µ–Ω–∏–π
        self.input.delete("1.0", "end")
        self._clear_attachment()

    def _apply_success(self, text: str, latency: float):
        self.send_btn.state(["!disabled"])
        self._append_assistant(text.strip() or "(–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç)")
        self._set_status(f"–ì–æ—Ç–æ–≤  ¬∑  {latency:.2f}s")
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        last_user = {"role": "user", "content": req_last_user_from_ui(self.chat)}
        if last_user["content"]:
            self.messages.append(last_user)
        self.messages.append({"role": "assistant", "content": text})
        save_history(self.messages)

    def _apply_error(self, err: str):
        self.send_btn.state(["!disabled"])
        self._set_status("–û—à–∏–±–∫–∞: " + err)
        messagebox.showerror("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞", err)


# –•–µ–ª–ø–µ—Ä: –≤—ã—Ç–∞—â–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Text
def req_last_user_from_ui(chat_text: tk.Text) -> str:
    content = chat_text.get("1.0", "end")
    lines = [l.rstrip("\n") for l in content.splitlines()]
    for i in range(len(lines) - 1, -1, -1):
        if lines[i].startswith("–í—ã  ¬∑  "):
            msg_lines = []
            for j in range(i + 1, len(lines)):
                if lines[j].strip() == "":
                    break
                msg_lines.append(lines[j])
            return "\n".join(msg_lines).strip()
    return ""


if __name__ == "__main__":
    app = JarvisClientApp()
    app.mainloop()
